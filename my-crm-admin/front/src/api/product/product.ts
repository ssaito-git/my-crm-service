/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * My CRM Service API
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetProductListParams,
  Product,
  ProductList
} from '.././model'



/**
 * @summary „Éó„É≠„ÉÄ„ÇØ„Éà„ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó„Åô„Çã
 */
export const getProductList = (
    params?: GetProductListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ProductList>> => {
    
    return axios.default.get(
      `/products`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetProductListQueryKey = (params?: GetProductListParams,) => {
    return [`/products`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductListQueryOptions = <TData = Awaited<ReturnType<typeof getProductList>>, TError = AxiosError<void>>(params?: GetProductListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductList>>> = ({ signal }) => getProductList(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProductListQueryResult = NonNullable<Awaited<ReturnType<typeof getProductList>>>
export type GetProductListQueryError = AxiosError<void>

/**
 * @summary „Éó„É≠„ÉÄ„ÇØ„Éà„ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetProductList = <TData = Awaited<ReturnType<typeof getProductList>>, TError = AxiosError<void>>(
 params?: GetProductListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProductListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProductListSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getProductList>>, TError = AxiosError<void>>(params?: GetProductListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProductList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductList>>> = ({ signal }) => getProductList(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProductList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProductListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getProductList>>>
export type GetProductListSuspenseQueryError = AxiosError<void>

/**
 * @summary „Éó„É≠„ÉÄ„ÇØ„Éà„ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetProductListSuspense = <TData = Awaited<ReturnType<typeof getProductList>>, TError = AxiosError<void>>(
 params?: GetProductListParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProductList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProductListSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ID „Å´‰∏ÄËá¥„Åô„Çã„Éó„É≠„ÉÄ„ÇØ„Éà„ÇíÂèñÂæó„Åô„Çã
 */
export const getProductById = (
    productId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Product>> => {
    
    return axios.default.get(
      `/products/${productId}`,options
    );
  }


export const getGetProductByIdQueryKey = (productId: string,) => {
    return [`/products/${productId}`] as const;
    }

    
export const getGetProductByIdQueryOptions = <TData = Awaited<ReturnType<typeof getProductById>>, TError = AxiosError<void>>(productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductByIdQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductById>>> = ({ signal }) => getProductById(productId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProductByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProductById>>>
export type GetProductByIdQueryError = AxiosError<void>

/**
 * @summary ID „Å´‰∏ÄËá¥„Åô„Çã„Éó„É≠„ÉÄ„ÇØ„Éà„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetProductById = <TData = Awaited<ReturnType<typeof getProductById>>, TError = AxiosError<void>>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProductByIdQueryOptions(productId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetProductByIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getProductById>>, TError = AxiosError<void>>(productId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductByIdQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductById>>> = ({ signal }) => getProductById(productId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProductByIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getProductById>>>
export type GetProductByIdSuspenseQueryError = AxiosError<void>

/**
 * @summary ID „Å´‰∏ÄËá¥„Åô„Çã„Éó„É≠„ÉÄ„ÇØ„Éà„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetProductByIdSuspense = <TData = Awaited<ReturnType<typeof getProductById>>, TError = AxiosError<void>>(
 productId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetProductByIdSuspenseQueryOptions(productId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



